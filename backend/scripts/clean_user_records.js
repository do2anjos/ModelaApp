const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, '..', 'db', 'modela_users.db');
const db = new sqlite3.Database(dbPath);

console.log('üßπ LIMPEZA DE REGISTROS DOS USU√ÅRIOS');
console.log('=====================================\n');

console.log('‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° limpar TODOS os dados de progresso dos usu√°rios!');
console.log('üìã Ser√£o mantidos apenas os dados de cadastro (nome, email, matr√≠cula, etc.)');
console.log('üóëÔ∏è  Ser√£o removidos: progresso, pontua√ß√µes, tentativas de exerc√≠cios, posts do f√≥rum\n');

// Fun√ß√£o para executar uma query e retornar uma Promise
function runQuery(query, params = []) {
  return new Promise((resolve, reject) => {
    db.run(query, params, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve(this.changes);
      }
    });
  });
}

// Fun√ß√£o para obter contagem de registros
function getCount(tableName) {
  return new Promise((resolve, reject) => {
    db.get(`SELECT COUNT(*) as count FROM ${tableName}`, [], (err, result) => {
      if (err) {
        reject(err);
      } else {
        resolve(result.count);
      }
    });
  });
}

async function cleanUserData() {
  try {
    console.log('üìä VERIFICANDO DADOS ANTES DA LIMPEZA...\n');
    
    // Contar registros antes da limpeza
    const usersCount = await getCount('users');
    const progressCount = await getCount('user_progress');
    const scoresCount = await getCount('user_scores');
    const attemptsCount = await getCount('exercise_attempts');
    const statesCount = await getCount('exercise_states');
    const topicsCount = await getCount('forum_topics');
    const repliesCount = await getCount('forum_replies');
    
    console.log(`üë• Usu√°rios cadastrados: ${usersCount}`);
    console.log(`üìà Registros de progresso: ${progressCount}`);
    console.log(`üèÜ Pontua√ß√µes: ${scoresCount}`);
    console.log(`üéØ Tentativas de exerc√≠cios: ${attemptsCount}`);
    console.log(`üìö Estados de exerc√≠cios: ${statesCount}`);
    console.log(`üí¨ T√≥picos do f√≥rum: ${topicsCount}`);
    console.log(`üí¨ Respostas do f√≥rum: ${repliesCount}\n`);
    
    if (usersCount === 0) {
      console.log('‚ùå Nenhum usu√°rio encontrado. N√£o h√° nada para limpar.');
      db.close();
      return;
    }
    
    console.log('üöÄ INICIANDO LIMPEZA...\n');
    
    // Limpar dados de progresso
    const progressRemoved = await runQuery('DELETE FROM user_progress');
    console.log(`‚úÖ Removidos ${progressRemoved} registros de progresso`);
    
    // Limpar pontua√ß√µes
    const scoresRemoved = await runQuery('DELETE FROM user_scores');
    console.log(`‚úÖ Removidas ${scoresRemoved} pontua√ß√µes`);
    
    // Limpar tentativas de exerc√≠cios
    const attemptsRemoved = await runQuery('DELETE FROM exercise_attempts');
    console.log(`‚úÖ Removidas ${attemptsRemoved} tentativas de exerc√≠cios`);
    
    // Limpar estados de exerc√≠cios
    const statesRemoved = await runQuery('DELETE FROM exercise_states');
    console.log(`‚úÖ Removidos ${statesRemoved} estados de exerc√≠cios`);
    
    // Limpar respostas do f√≥rum primeiro (devido √† foreign key)
    const repliesRemoved = await runQuery('DELETE FROM forum_replies');
    console.log(`‚úÖ Removidas ${repliesRemoved} respostas do f√≥rum`);
    
    // Limpar t√≥picos do f√≥rum
    const topicsRemoved = await runQuery('DELETE FROM forum_topics');
    console.log(`‚úÖ Removidos ${topicsRemoved} t√≥picos do f√≥rum`);
    
    console.log('\nüìä VERIFICANDO DADOS AP√ìS A LIMPEZA...\n');
    
    // Verificar contagens ap√≥s limpeza
    const finalUsersCount = await getCount('users');
    const finalProgressCount = await getCount('user_progress');
    const finalScoresCount = await getCount('user_scores');
    const finalAttemptsCount = await getCount('exercise_attempts');
    const finalStatesCount = await getCount('exercise_states');
    const finalTopicsCount = await getCount('forum_topics');
    const finalRepliesCount = await getCount('forum_replies');
    
    console.log(`üë• Usu√°rios cadastrados: ${finalUsersCount} (mantidos)`);
    console.log(`üìà Registros de progresso: ${finalProgressCount} (limpos)`);
    console.log(`üèÜ Pontua√ß√µes: ${finalScoresCount} (limpas)`);
    console.log(`üéØ Tentativas de exerc√≠cios: ${finalAttemptsCount} (limpas)`);
    console.log(`üìö Estados de exerc√≠cios: ${finalStatesCount} (limpos)`);
    console.log(`üí¨ T√≥picos do f√≥rum: ${finalTopicsCount} (limpos)`);
    console.log(`üí¨ Respostas do f√≥rum: ${finalRepliesCount} (limpas)`);
    
    console.log('\nüéâ LIMPEZA CONCLU√çDA COM SUCESSO!');
    console.log('‚ú® Todos os usu√°rios agora come√ßam do zero.');
    console.log('üîí Dados de cadastro foram preservados.');
    
    // Listar usu√°rios mantidos
    db.all('SELECT id, nome, email, username FROM users', [], (err, users) => {
      if (err) {
        console.error('Erro ao listar usu√°rios:', err);
        return;
      }
      
      console.log('\nüë• USU√ÅRIOS MANTIDOS:');
      users.forEach(user => {
        console.log(`  ID: ${user.id} | Nome: ${user.nome} | Email: ${user.email} | Username: ${user.username}`);
      });
      
      db.close();
    });
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error);
    db.close();
    process.exit(1);
  }
}

cleanUserData();
